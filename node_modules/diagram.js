function diagramInit(loadFile){
  
  var $ = go.GraphObject.make;

  var myDiagram = $(go.Diagram, "myDiagramDiv",
                {
                  initialContentAlignment: go.Spot.Center,
                  "undoManager.isEnabled": true
                });

  // define a simple Node template. This should go first after defining diagram.
  myDiagram.nodeTemplate =
    $(go.Node,
      { 
        locationSpot: go.Spot.TopLeft,
        locationObjectName: "SHAPE",
        resizable: true,
        // mouseEnter: function (e, obj) { showPoint(obj.part.location); },
        // click: function (e, obj) { showPoint(obj.part.location); }
      },
      new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
      $(go.Shape,
        {stroke: null, name: "SHAPE"},
        new go.Binding("shape", "figure"),
        new go.Binding("fill", "color"),
        new go.Binding("width", "width").makeTwoWay(),
        new go.Binding("height", "height").makeTwoWay()),
      $(go.TextBlock,
        { font: "10px sans-serif", textAlign: "center", verticalAlignment: go.Spot.Center },
        new go.Binding("text", "key"),
        new go.Binding("width", "width"),
        new go.Binding("height", "height"))
    );
  
  var offsetX = 0;
  for(item in loadFile.nodeDataArray){
    for(key in loadFile.nodeDataArray[item]){
      if(key === "width" || key === "height" || key === "frontOffset" || key == "backOffset"){
        loadFile.nodeDataArray[item][key] = loadFile.nodeDataArray[item][key] / 20;
      }
    }
    if(item > 0){
      offsetX = offsetX + loadFile.nodeDataArray[item-1].width;
      loadFile.nodeDataArray[item].loc = ComputeLocationFromJsonModel(loadFile.nodeDataArray[item-1].frontOffset, 
                      loadFile.nodeDataArray[item].frontOffset,
                      offsetX);
    }
  }

  myDiagram.model = go.Model.fromJson(loadFile);
  InputIterationBuilder(loadFile);

  var node = myDiagram.findNodeForKey("S2");

  // Selects the node:
  myDiagram.select(node);
  console.log(myDiagram.model.toJson());

  var showPoint = function(loc) {
    console.log("x: " + loc.x.toFixed(2) + " y: " + loc.y.toFixed(2));
  }

  // Outputs a JavaScript object in the developer console
  // display of output will differ per browser, but is essentially the object:
  // { key: "Alpha", color: "lightblue" }
  // plus some internal implementation details.
  console.log(node.data);

  var selectionButton = document.getElementById("selectionButton");
  selectionButton.addEventListener("click", function() {
    myDiagram.startTransaction("change color");
    var model = myDiagram.model;
    var it = myDiagram.selection.iterator;
    while (it.next()) {
      var node = it.value;
      var shape = node.findObject("SHAPE");
      // If there was a GraphObject in the node named SHAPE, then set its fill to red:
      if (shape !== null) {
        shape.fill = "red";
        model.setDataProperty(node.data, "color", "red");
        console.log(node.data.color);
      }
    }

    myDiagram.commitTransaction("change color");
  });

  myDiagram.toolManager.resizingTool.doMouseUp = function() {
      node = this.adornedObject;
      myDiagram.model.startTransaction("Resize node " + node.key);
      myDiagram.model.setDataProperty(node.data, "width", node.width);
      myDiagram.model.setDataProperty(node.data, "height", node.height);
      myDiagram.model.commitTransaction("Resize node " + node.key);

      go.ResizingTool.prototype.doMouseUp.call(this);
      console.log(myDiagram.model.toJson());
    }

  myDiagram.grid = $(go.Panel, "Grid",
        { gridCellSize: new go.Size(20,20), visible: true },
        $(go.Shape, "LineH", { stroke: "lightgray" }),
        $(go.Shape, "LineV", { stroke: "lightgray" }));

  myDiagram.toolManager.draggingTool.isGridSnapEnabled = true;
}

var ComputeLocationFromJsonModel = function(prevOffset, currentOffset, prevItemWidth){
  return loc = prevOffset == currentOffset ? prevItemWidth + " 0" : prevItemWidth + " " + currentOffset;
};